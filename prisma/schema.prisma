// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =====================
// MODELO: COMPANY
// =====================
model Company {
  id           String    @id @default(uuid()) @db.Char(36)
  name         String    @db.VarChar(255)
  rut          String    @unique @db.VarChar(50)
  logoUrl      String?   @map("logo_url") @db.VarChar(500)
  address      String?   @db.VarChar(255)
  phone        String?   @db.VarChar(50)
  contactEmail String?   @map("contact_email") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt    DateTime? @map("deleted_at") @db.DateTime(0)

  users       User[]
  products    Product[]
  categories  Category[]
  clients     Client[]
  quotations  Quotation[]
  automations Automation[]

  @@index([rut])
  @@map("Companies")
}

// =====================
// MODELO: USER
// =====================
model User {
  id           String    @id @default(uuid()) @db.Char(36)
  companyId    String    @map("company_id") @db.Char(36)
  email        String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  firstName    String    @map("first_name") @db.VarChar(255)
  lastName     String    @map("last_name") @db.VarChar(255)
  role         UserRole  @default(seller)
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt    DateTime? @map("deleted_at") @db.DateTime(0)

  company          Company            @relation(fields: [companyId], references: [id])
  quotations       Quotation[]
  quotationHistory QuotationHistory[]

  @@index([companyId], map: "fk_users_company")
  @@map("Users")
}

enum UserRole {
  admin
  seller
}

// =====================
// MODELO: CATEGORY (MIGRADO)
// =====================
model Category {
  id          String    @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  companyId   String    @map("company_id") @db.Char(36)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  company  Company   @relation(fields: [companyId], references: [id])
  products Product[]

  @@index([companyId], map: "fk_categories_company")
  @@map("Categories")
}

// ==========================================
// MODELO: PRODUCT (MIGRADO)
// ==========================================
model Product {
  id            String    @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  companyId     String    @map("company_id") @db.Char(36)
  categoryId    String?   @map("category_id") @db.Char(36)   // ← CAMBIADO A STRING
  name          String    @db.VarChar(255)
  description   String?   @db.Text
  type          String?   @db.VarChar(100)
  brand         String?   @db.VarChar(100)
  basePrice     Decimal   @map("base_price") @db.Decimal(10, 2)
  taxPercentage Decimal?  @map("tax_percentage") @db.Decimal(5, 2)
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt     DateTime? @map("deleted_at") @db.DateTime(0)

  company          Company           @relation(fields: [companyId], references: [id])
  category         Category?         @relation(fields: [categoryId], references: [id])
  quotationDetails QuotationDetail[]

  @@index([companyId], map: "fk_products_company")
  @@index([categoryId], map: "fk_products_category")
  @@map("Products")
}

// ==========================================
// MODELO: CLIENT
// ==========================================
model Client {
  id               String    @id @default(uuid()) @db.Char(36)
  companyId        String    @map("company_id") @db.Char(36)
  name             String    @db.VarChar(255)
  email            String?   @db.VarChar(255)
  phone            String?   @db.VarChar(20)
  clientCompany    String?   @map("client_company") @db.VarChar(255)
  referenceContact String?   @map("reference_contact") @db.VarChar(255)
  dataConsent      Boolean   @default(false) @map("data_consent")
  consentDate      DateTime? @map("consent_date") @db.DateTime(0)
  createdAt        DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt        DateTime? @map("deleted_at") @db.DateTime(0)

  company    Company     @relation(fields: [companyId], references: [id])
  quotations Quotation[]

  @@index([companyId], map: "fk_clients_company")
  @@map("Clients")
}

// ==========================================
// MODELO: QUOTATION (MIGRADO)
// ==========================================
model Quotation {
  id              String          @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  quotationNumber String          @unique @map("quotation_number") @db.VarChar(50)
  userId          String          @map("user_id") @db.Char(36)
  clientId        String          @map("client_id") @db.Char(36)
  companyId       String          @map("company_id") @db.Char(36)
  total           Decimal?        @db.Decimal(12, 2)
  totalTax        Decimal?        @map("total_tax") @db.Decimal(12, 2)
  status          QuotationStatus @default(sent)
  sentAt          DateTime?       @map("sent_at") @db.DateTime(0)
  expiresAt       DateTime?       @map("expires_at") @db.DateTime(0)
  acceptedAt      DateTime?       @map("accepted_at") @db.DateTime(0)
  rejectionReason String?         @map("rejection_reason") @db.VarChar(500)
  internalNotes   String?         @map("internal_notes") @db.Text
  createdAt       DateTime        @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime?       @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt       DateTime?       @map("deleted_at") @db.DateTime(0)

  user          User               @relation(fields: [userId], references: [id])
  client        Client             @relation(fields: [clientId], references: [id])
  company       Company            @relation(fields: [companyId], references: [id])
  details       QuotationDetail[]
  history       QuotationHistory[]
  notifications NotificationSent[]

  @@index([userId], map: "fk_quotations_user")
  @@index([clientId], map: "fk_quotations_client")
  @@index([companyId], map: "fk_quotations_company")
  @@map("Quotations")
}

enum QuotationStatus {
  sent
  accepted
  rejected
  expired
}

// ==========================================
// MODELO: QUOTATION_DETAIL (MIGRADO)
// ==========================================
model QuotationDetail {
  id          String    @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  quotationId String    @map("quotation_id") @db.Char(36)  // ← CAMBIADO A STRING
  productId   String    @map("product_id") @db.Char(36)    // ← CAMBIADO A STRING
  quantity    Int
  unitPrice   Decimal   @map("unit_price") @db.Decimal(10, 2)
  subtotal    Decimal?  @db.Decimal(12, 2)
  lineTax     Decimal?  @map("line_tax") @db.Decimal(12, 2)

  quotation Quotation @relation(fields: [quotationId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@index([quotationId], map: "fk_qdetails_quotation")
  @@index([productId], map: "fk_qdetails_product")
  @@map("Quotation_Details")
}

// ==========================================
// MODELO: QUOTATION_HISTORY (MIGRADO)
// ==========================================
model QuotationHistory {
  id             String           @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  quotationId    String           @map("quotation_id") @db.Char(36)  // ← CAMBIADO A STRING
  userId         String           @map("user_id") @db.Char(36)
  previousStatus QuotationStatus? @map("previous_status")
  newStatus      QuotationStatus? @map("new_status")
  changeReason   String?          @map("change_reason") @db.VarChar(500)
  changedAt      DateTime         @default(now()) @map("changed_at") @db.DateTime(0)

  quotation Quotation @relation(fields: [quotationId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([quotationId], map: "fk_qhistory_quotation")
  @@index([userId], map: "fk_qhistory_user")
  @@map("Quotation_History")
}

// ==========================================
// MODELO: AUTOMATION (MIGRADO)
// ==========================================
model Automation {
  id           String         @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  companyId    String         @map("company_id") @db.Char(36)
  type         AutomationType
  daysWait     Int?           @map("days_wait")
  emailSubject String?        @map("email_subject") @db.Text
  emailContent String?        @map("email_content") @db.Text
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime?      @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt    DateTime?      @map("deleted_at") @db.DateTime(0)

  company       Company            @relation(fields: [companyId], references: [id])
  notifications NotificationSent[]

  @@index([companyId], map: "fk_automations_company")
  @@map("Automations")
}

enum AutomationType {
  reminder
  promotion
}

// ==========================================
// MODELO: NOTIFICATION_SENT (MIGRADO)
// ==========================================
model NotificationSent {
  id             String         @id @default(uuid()) @db.Char(36)  // ← CAMBIADO A STRING
  quotationId    String         @map("quotation_id") @db.Char(36)  // ← CAMBIADO A STRING
  automationId   String?        @map("automation_id") @db.Char(36) // ← CAMBIADO A STRING
  recipientEmail String         @map("recipient_email") @db.VarChar(255)
  type           AutomationType
  sendStatus     SendStatus     @default(pending) @map("send_status")
  errorReason    String?        @map("error_reason") @db.VarChar(500)
  sentAt         DateTime?      @map("sent_at") @db.DateTime(0)
  updatedAt      DateTime?      @updatedAt @map("updated_at") @db.DateTime(0)

  quotation  Quotation   @relation(fields: [quotationId], references: [id])
  automation Automation? @relation(fields: [automationId], references: [id])

  @@index([quotationId], map: "fk_notif_quotation")
  @@index([automationId], map: "fk_notif_automation")
  @@map("Notifications_Sent")
}

enum SendStatus {
  sent
  failed
  pending
}